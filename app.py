import os
import time
import qrcode
import smtplib
import ssl
import gspread
import json
import traceback
from email.message import EmailMessage
from oauth2client.service_account import ServiceAccountCredentials
from flask import Flask

app = Flask(__name__)

# ------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API
# ------------------------------
SCOPE = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]

SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
if not SPREADSHEET_ID:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: SPREADSHEET_ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

# ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON-–∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS_JSON")

if not CREDENTIALS_JSON:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: GOOGLE_CREDENTIALS_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

try:
    creds_dict = json.loads(CREDENTIALS_JSON)

    # üî• –ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∑–∞–º–µ–Ω—è–µ–º `\\n` –Ω–∞ `\n`
    creds_dict["private_key"] = creds_dict["private_key"].replace("\\n", "\n").strip()

    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –∫–ª—é—á
    print(f"[DEBUG] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π private_key (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤): {creds_dict.get('private_key')[:50]}")

    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, SCOPE)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID).sheet1
except Exception as e:
    raise ValueError(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")

# ------------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SMTP (Gmail)
# ------------------------------
SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USER = os.getenv("SMTP_USER")
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

if not SMTP_USER or not SMTP_PASSWORD:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: SMTP_USER –∏–ª–∏ SMTP_PASSWORD –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

def send_email(email, name, qr_filename):
    try:
        msg = EmailMessage()
        msg["Subject"] = "–í–∞—à QR-–∫–æ–¥"
        msg["From"] = SMTP_USER
        msg["To"] = email
        msg.set_content(f"""–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ BI Ecosystem!  

–≠—Ç–æ –≤–∞—à –≤—Ö–æ–¥–Ω–æ–π –±–∏–ª–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —É–¥–∞–ª—è–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ. QR-–∫–æ–¥ –Ω—É–∂–Ω–æ –ø—Ä–µ–¥—ä—è–≤–∏—Ç—å –Ω–∞ –≤—Ö–æ–¥–µ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ —Ü–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤!  

–ñ–¥—ë–º –≤–∞—Å 15 –∞–ø—Ä–µ–ª—è –≤ 9:30 –ø–æ –∞–¥—Ä–µ—Å—É: –º–∫—Ä. –®—ã–º—Å–∏—Ç–∏ 101/1, Tulip Hall""")

        with open(qr_filename, "rb") as qr_file:
            msg.add_attachment(
                qr_file.read(),
                maintype="image",
                subtype="png",
                filename="qrcode.png"
            )

        context = ssl.create_default_context()
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls(context=context)
            server.login(SMTP_USER, SMTP_PASSWORD)
            server.send_message(msg)

        print(f"[OK] –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email}")
        return True
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –Ω–∞ {email}: {e}")
        traceback.print_exc()
        return False

def process_new_guests():
    try:
        all_values = sheet.get_all_values()

        for i in range(1, len(all_values)):
            row = all_values[i]
            if len(row) < 8:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ 8 –∫–æ–ª–æ–Ω–æ–∫
                continue

            email, name, phone, status = row[0], row[1], row[2], row[7]

            if not name or not phone or not email or status.strip().lower() == "done":
                continue

            qr_data = f"Name: {name}\nPhone: {phone}\nEmail: {email}"
            os.makedirs("qrcodes", exist_ok=True)
            qr_filename = f"qrcodes/{email.replace('@', '_')}.png"

            qr = qrcode.make(qr_data)
            qr.save(qr_filename)

            if send_email(email, name, qr_filename):
                sheet.update_cell(i+1, 8, "Done")
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞] –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ—Å—Ç–µ–π: {e}")
        traceback.print_exc()

# –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Google Sheets)
def background_task():
    while True:
        try:
            process_new_guests()
        except Exception as e:
            print(f"[–û—à–∏–±–∫–∞] {e}")
            traceback.print_exc()
        time.sleep(30)

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
import threading
threading.Thread(target=background_task, daemon=True).start()

@app.route("/")
def home():
    return "QR Code Generator is running!", 200

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))  # Railway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç PORT
    app.run(host="0.0.0.0", port=port)
